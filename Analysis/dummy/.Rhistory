ACC_c<- ggplot(ACC_cond,
aes(x=Condition,y=MeanACC,fill=Condition)) +
# geom_bar function is used to plot bars of barplot
geom_bar(stat = "identity", width = 0.4, )+
ylab("Accuracy in %") +
xlab("Conditions") +
coord_cartesian(ylim = c(0, 100)) +
theme_bw(base_size = 12) +
scale_fill_manual(values=c("#EBBED3", "#847262", "#56B4E9"))+
# geom_signif(textsize=3,
#    y_position = c(1050, 1100, 1200), xmin = c(1, 2, 1), xmax = c(2, 3, 3),
#    annotation = c("<.0001 ", "<.0001","0.0755"), tip_length = 0.2
#  )
#geom_errorbar function is used to plot error bars
geom_errorbar(aes(ymin=MeanACC-SE,
ymax=MeanACC+SE),
width=0.1)
ACC_c + theme_bw()+ theme(axis.text=element_text(size=12),
axis.title=element_text(size=12,face="bold"),
axis.title.x = element_blank())
ggarrange(ACC_c) %>%
ggexport(filename = "plots/ACC_cond.pdf")
ggarrange(ACC_c) %>%
ggexport(filename = "plots/ACC_cond.png")
ggsave('plots/ACC_Condidtion.png', ACC_c, width = 5, height = 5, units = 'cm')
# Create bar plot using ggplot() function
#level_order <- factor(df$Condition, level = c('CatViol', 'Gramm', 'SemViol'))
RT_p<- ggplot(RT_pre,
aes(x=Condition,y=Mean,fill=Condition)) +
# geom_bar function is used to plot bars of barplot
geom_bar(stat = "identity", width = 0.6, position = position_dodge(1) )+  facet_wrap( ~Prefix) +
ylab("Reaction Time in ms") +
xlab("Conditions") +
coord_cartesian(ylim = c(0, 1000)) +
theme_bw(base_size = 12) +
scale_fill_manual(values=c("#EBBED3", "#847262", "#56B4E9"))+
# geom_signif(textsize=3,
#    y_position = c(1050, 1100, 1200), xmin = c(1, 2, 1), xmax = c(2, 3, 3),
#    annotation = c("<.0001 ", "<.0001","0.0755"), tip_length = 0.2
#  )
#geom_errorbar function is used to plot error bars
geom_errorbar(aes(ymin=Mean-SE,
ymax=Mean+SE),
width=0.1)
RT_p + theme_bw()+ theme(axis.text=element_text(size=12),
axis.title=element_text(size=12,face="bold"),
axis.title.x = element_blank())
ggarrange(RT_p) %>%
ggexport(filename = "plots/RT_pre.pdf")
ggarrange(RT_p) %>%
ggexport(filename = "plots/RT_pre.png")
#BAN_beh_data_RT <- rbind(BAN_RT,BAN_MEG_RT)
#BAN_beh_data_ACC <- rbind(BAN_ACC, BAN_MEG_ACC)
BAN_beh_data_RT <- BAN_MEG_RT
library(lme4)
library(glmm)
library(tidyverse)
library(ggplot2)
library(trimr)
require(car)
require(lattice)
require(itsadug)
library(ggpubr)
library(effects)
library(sjPlot)
library(effectsize)
library(trimr)
library(palmerpenguins)
library(taylor)
library(plotrix)
BAN_RT <- read.csv(file = "data/BAN_RT.csv", header = T)
BAN_ACC <- read.csv(file = "data/BAN_ACC.csv", header = T)
BAN_MEG_RT <- read.csv(file = "data/BAN_MEG_RT.csv", header = T)
BAN_MEG_ACC <- read.csv(file = "data/BAN_MEG_ACC.csv", header = T)
BAN_RT$Source<-"Online"
BAN_ACC$Source<-"Online"
BAN_MEG_RT$Source<-"MEG"
BAN_MEG_ACC$Source<-"MEG"
#BAN_beh_data_RT <- rbind(BAN_RT,BAN_MEG_RT)
#BAN_beh_data_ACC <- rbind(BAN_ACC, BAN_MEG_ACC)
BAN_beh_data_RT <- BAN_MEG_RT
BAN_beh_data_ACC <- BAN_MEG_ACC
BAN_Data_ACC_ByItem<-BAN_beh_data_ACC%>%group_by(Item.no, Condition)%>%summarise(ACC=mean(ACC)*100)
#view(BAN_Data_ACC_ByItem)
str(BAN_beh_data_RT)
BAN_beh_data_RT <- BAN_beh_data_RT %>%
mutate(
Participant = as.factor(Participant),
Source = as.factor(Source),
Prefix = as.factor(Prefix),
Condition = as.factor(Condition),
Item = as.factor(Item.no)
)
str(BAN_beh_data_RT)
BAN_beh_data_RT <- BAN_beh_data_RT %>%
mutate(
Participant = as.factor(Participant),
Source = as.factor(Source),
Prefix = as.factor(Prefix),
Condition = as.factor(Condition),
Item = as.factor(Item.no)
)
str(BAN_beh_data_RT)
qqmath(~RT | Participant, data = BAN_beh_data_RT)
f = function(dfr)
return(shapiro.test(dfr$RT)$p.value)
p = as.vector(by(BAN_beh_data_RT, BAN_beh_data_RT$Participant, f))
names(p) = levels(BAN_beh_data_RT$Participant)
names(p[p < 0.05])
mean(BAN_beh_data_RT[BAN_beh_data_RT$Condition=="SemViol",]$RT)
mean(BAN_beh_data_RT[BAN_beh_data_RT$Condition=="CatViol",]$RT)
mean(BAN_beh_data_RT[BAN_beh_data_RT$Condition=="Gramm",]$RT)
BanFullModel_RT <- lmer(RT ~ (1|Participant) + (1|Item), data = BAN_beh_data_RT, REML = F)
cor(fitted(BanFullModel_RT), BAN_beh_data_RT$RT)^2
BanFullModel_RT_Res = BAN_beh_data_RT[abs(scale(resid(BanFullModel_RT))) < 2.5,]
BanFullModel_RT_2 <- lmer(RT ~ (1|Participant) + (1|Item), data = BanFullModel_RT_Res, REML = F)
cor(fitted(BanFullModel_RT_2), BanFullModel_RT_Res$RT)^2
qqmath(~RT | Participant, data = BanFullModel_RT_Res)
f = function(dfr)
return(shapiro.test(dfr$RT)$p.value)
p = as.vector(by(BanFullModel_RT_Res, BanFullModel_RT_Res$Participant, f))
names(p) = levels(BanFullModel_RT_Res$Participant)
names(p[p < 0.05])
mean(BanFullModel_RT_Res[BanFullModel_RT_Res$Condition=="SemViol",]$RT)
mean(BanFullModel_RT_Res[BanFullModel_RT_Res$Condition=="CatViol",]$RT)
mean(BanFullModel_RT_Res[BanFullModel_RT_Res$Condition=="Gramm",]$RT)
BanFullModel_RT_Res$Condition <-relevel(BanFullModel_RT_Res$Condition, ref="Gramm")
BAN_RT_Main2 <- lmer(RT ~ Condition * Prefix +(1|Participant) + (1|Item), data = BanFullModel_RT_Res, REML = F)
tab_model(BAN_RT_Main2)
summary(BAN_RT_Main2)
View(exc_participant)
library(lme4)
library(glmm)
library(tidyverse)
library(ggplot2)
library(trimr)
require(car)
require(lattice)
require(itsadug)
library(ggpubr)
library(effects)
library(sjPlot)
library(effectsize)
library(trimr)
library(palmerpenguins)
library(taylor)
library(plotrix)
BAN_RT <- read.csv(file = "data/BAN_RT.csv", header = T)
BAN_ACC <- read.csv(file = "data/BAN_ACC.csv", header = T)
BAN_MEG_RT <- read.csv(file = "data/BAN_MEG_RT.csv", header = T)
BAN_MEG_ACC <- read.csv(file = "data/BAN_MEG_ACC.csv", header = T)
BAN_RT$Source<-"Online"
BAN_ACC$Source<-"Online"
BAN_MEG_RT$Source<-"MEG"
BAN_MEG_ACC$Source<-"MEG"
View(BAN_MEG_ACC)
unique(BAN_MEG_RT$Condition)
nchar(প্রতি)
nchar("প্রতি")
length("প্রতি")
knitr::opts_chunk$set(echo = TRUE)
library(lme4)
library(glmm)
library(tidyverse)
updateR()
install.packages("tidyverse")
install.packages("tidyverse")
knitr::opts_chunk$set(echo = TRUE)
library(lme4)
library(lme4)
library(glmm)
library(tidyverse)
library(ggplot2)
library(trimr)
require(car)
require(lattice)
require(itsadug)
library(ggpubr)
library(effects)
library(sjPlot)
library(effectsize)
library(trimr)
library(palmerpenguins)
library(taylor)
# Load the raw dataset
# Import CSV files - Left and Right - PROLIFIC
Pro_dataL = read.csv(file = "data/pro_L.csv", header = T)
Pro_dataR = read.csv(file = "data/pro_R.csv", header = T)
# Import CSV files - Left and Right - mTurk
mTurk_dataL = read.csv(file = "data/mTurk_L.csv", header = T)
mTurk_dataR = read.csv(file = "data/mTurk_R.csv", header = T)
# Cols to keepLeft
cols_to_keep <- c(
"Participant.Private.ID",
"randomiser.mcsp",
"Zone.Type",
"Reaction.Time",
"Response",
"Correct",
"display",
"Condition",
"Item.number"
)
# Merging both CSVs
Prolific<-rbind(Pro_dataL,Pro_dataR)
Pro_data <- select(Prolific, cols_to_keep)
mTurk<-rbind(mTurk_dataL,mTurk_dataR)
mTurk_data <- select(mTurk, cols_to_keep)
raw_data <- rbind(mTurk_data,Pro_data)
# add items list for the prefix
items = read.csv(file = "data/items-prefix-only.csv", header = T)
items <- items %>%
mutate(Item.number = as.numeric(Item.number))
raw_data <- raw_data %>%
mutate(Item.number = as.numeric(Item.number))
raw_data <- raw_data %>% inner_join(items, by=c("Item.number"))
BAN_Data <- raw_data %>% rename(
Participant = Participant.Private.ID,
Response.Type = Zone.Type,
RT = Reaction.Time,
Group = randomiser.mcsp,
Item.no = Item.number,
Condition = Condition,
Trial.Type = display,
ACC = Correct,
Prefix = Prefix
)
BAN_Data <- BAN_Data %>% filter(Response.Type=="response_keyboard_single")
BAN_Data <- BAN_Data %>% filter(Response.Type=="response_keyboard_single")
filler_BAN_Data <- BAN_Data %>% filter(Condition =="Filler")
critical_BAN_Data <-BAN_Data %>% filter(Condition !="Filler")
BAN_Data_Full <- rbind(critical_BAN_Data, filler_BAN_Data)
write_csv(BAN_Data_Full, "output/BAN_Behav_Data.csv")
BAN_Data_ACC_filler<-filler_BAN_Data%>%group_by(Participant)%>%summarise(ACC=mean(ACC)*100)
exc_participant <- BAN_Data_ACC_filler%>%filter(ACC <75)
inc_participant <- BAN_Data_ACC_filler%>%filter(ACC >=75)
critical_BAN_Data_75 <-critical_BAN_Data[!critical_BAN_Data$Participant %in% exc_participant$Participant,]
min_trim_rm<-filter(critical_BAN_Data_75, RT < 200)
BAN_min_trim_critical_trials<-filter(critical_BAN_Data_75, RT >= 200)
min_trim_rm<-filter(critical_BAN_Data_75, RT < 200)
BAN_min_trim_critical_trials<-filter(critical_BAN_Data_75, RT >= 200)
BAN_correct_data<-BAN_min_trim_critical_trials %>% filter(ACC=="1")
BAN_RT <- BAN_correct_data %>% select(Participant, RT, ACC, Condition, Item.no, Prefix)
BAN_ACC <- BAN_min_trim_critical_trials %>% select(Participant, RT, ACC, Condition, Item.no, Prefix)
write_csv(BAN_ACC, "output/BAN_ACC.csv")
write_csv(BAN_RT, "output/BAN_RT.csv")
BAN_Mean_PerCond<-BAN_Data%>%group_by(Condition)%>%summarise(Mean=mean(RT), SD=sd(RT), UpperLimit=SD*2.5+Mean)
#view(BAN_Mean_PerCond)
write_csv(BAN_Mean_PerCond, "output/BAN_Mean_PerCond.csv")
BAN_Data_ACC_ByItem<-BAN_min_trim_critical_trials%>%group_by(Item.no, Condition)%>%summarise(ACC=mean(ACC)*100)
BAN_Data_ACC_ByCond<-BAN_min_trim_critical_trials%>%group_by(Condition)%>%summarise(ACC=mean(ACC)*100)
#view(BAN_Data_ACC_ByItem)
write_csv(BAN_Data_ACC_ByItem, "output/BAN_ACC_ByItem.csv")
write_csv(BAN_Data_ACC_ByCond, "output/BAN_ACC_ByCond.csv")
BAN_beh_data_RT <- BAN_correct_data
BAN_beh_data_ACC <- BAN_min_trim_critical_trials
BAN_Data_ACC_ByItem<-BAN_beh_data_ACC%>%group_by(Item.no, Condition)%>%summarise(ACC=mean(ACC)*100)
#view(BAN_Data_ACC_ByItem)
str(BAN_beh_data_RT)
BAN_beh_data_RT <- BAN_beh_data_RT %>%
mutate(
Participant = as.factor(Participant),
#Response = as.factor(Response),
Prefix = as.factor(Prefix),
Condition = as.factor(Condition),
Item = as.factor(Item.no)
)
str(BAN_beh_data_RT)
qqmath(~RT | Participant, data = BAN_beh_data_RT)
f = function(dfr)
return(shapiro.test(dfr$RT)$p.value)
p = as.vector(by(BAN_beh_data_RT, BAN_beh_data_RT$Participant, f))
names(p) = levels(BAN_beh_data_RT$Participant)
names(p[p < 0.05])
mean(BAN_beh_data_RT[BAN_beh_data_RT$Condition=="SemViol",]$RT)
mean(BAN_beh_data_RT[BAN_beh_data_RT$Condition=="CatViol",]$RT)
mean(BAN_beh_data_RT[BAN_beh_data_RT$Condition=="Gramm",]$RT)
BanFullModel_RT <- lmer(RT ~ (1|Participant) + (1|Item), data = BAN_beh_data_RT, REML = F)
cor(fitted(BanFullModel_RT), BAN_beh_data_RT$RT)^2
BanFullModel_RT_Res = BAN_beh_data_RT[abs(scale(resid(BanFullModel_RT))) < 2.5,]
BanFullModel_RT_2 <- lmer(RT ~ (1|Participant) + (1|Item), data = BanFullModel_RT_Res, REML = F)
cor(fitted(BanFullModel_RT_2), BanFullModel_RT_Res$RT)^2
qqmath(~RT | Participant, data = BanFullModel_RT_Res)
f = function(dfr)
return(shapiro.test(dfr$RT)$p.value)
p = as.vector(by(BanFullModel_RT_Res, BanFullModel_RT_Res$Participant, f))
names(p) = levels(BanFullModel_RT_Res$Participant)
names(p[p < 0.05])
mean(BanFullModel_RT_Res[BanFullModel_RT_Res$Condition=="SemViol",]$RT)
mean(BanFullModel_RT_Res[BanFullModel_RT_Res$Condition=="CatViol",]$RT)
mean(BanFullModel_RT_Res[BanFullModel_RT_Res$Condition=="Gramm",]$RT)
BAN_RT_Main <- lmer(RT ~ Condition * Prefix + (Condition*Prefix|Participant) + (Condition*Prefix|Item), data = BanFullModel_RT_Res, REML = F)
allFit(BAN_RT_Main)
BAN_RT_Main <- lmer(RT ~ Condition * Prefix + (Condition*Prefix|Participant) + (1|Item), data = BanFullModel_RT_Res, REML = F)
tab_model(BAN_RT_Main)
summary(BAN_RT_Main)
BAN_RT_Main2 <- lmer(RT ~ Condition * Prefix + (1|Participant) + (1|Item), data = BanFullModel_RT_Res, REML = F)
tab_model(BAN_RT_Main2)
summary(BAN_RT_Main2)
BAN_RT_RED <- lmer(RT ~ Condition + Prefix + (1|Participant) + (1|Item), data = BanFullModel_RT_Res, REML = F)
BAN_RT_RED1 <- lmer(RT ~ Prefix + (1|Participant) + (1|Item), data = BanFullModel_RT_Res, REML = F)
BAN_RT_RED2 <- lmer(RT ~ Condition + (1|Participant) + (1|Item), data = BanFullModel_RT_Res, REML = F)
anova(BAN_RT_Main2, BAN_RT_RED)
anova(BAN_RT_RED, BAN_RT_RED1)
anova(BAN_RT_RED, BAN_RT_RED2)
library(multcomp)
library(emmeans)
BAN_RT_Main.emm <- emmeans(BAN_RT_Main2, ~ Condition * Prefix, lmer.df = "asymp")
pairs(BAN_RT_Main.emm, simple = "each")
write_csv(BanFullModel_RT_Res, "output/BAN_SAVANT_Final.csv")
RTPlot <- BanFullModel_RT_Res %>%
ggplot(aes(x=Condition, y=RT, fill=Condition)) +
geom_violin(trim = FALSE,alpha = 0.5, draw_quantiles=c(0.5),position = position_dodge(5)) +
ylab("Reaction Time") +
scale_fill_manual(values=c("#EBBED3", "#847262", "#56B4E9")) +
theme_bw(base_size = 12) +
scale_y_continuous(breaks = c(500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000), limits = c(500, 2000)) +
geom_boxplot(width=0.2, position = position_dodge(1))
RTPlot + theme(axis.text=element_text(size=11),
axis.title=element_text(size=11,face="bold"),
axis.title.x = element_blank())
RTPlot2 <- BanFullModel_RT_Res %>%
ggplot(aes(x=Condition, y=RT, fill=Prefix)) +
geom_violin(trim = FALSE,alpha = 0.5, draw_quantiles=c(0.5),position = position_dodge(5)) +
ylab("Reaction Time") +
scale_fill_manual(values=c("#592617", "#B38468")) +
theme_bw(base_size = 12) +
scale_y_continuous(breaks = c(500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000), limits = c(500, 2000)) +
geom_boxplot(width=0.2, position = position_dodge(1)) + facet_wrap( ~Prefix)
RTPlot2 + theme(axis.text=element_text(size=11),
axis.title=element_text(size=11,face="bold"),
axis.title.x = element_blank())
str(BAN_beh_data_ACC)
BAN_beh_data_ACC <- BAN_beh_data_ACC %>%
mutate(
Participant = as.factor(Participant),
#Response = as.factor(Response),
Prefix = as.factor(Prefix),
Condition = as.factor(Condition),
Item = as.factor(Item.no)
)
str(BAN_beh_data_ACC)
mean(BAN_beh_data_ACC[BAN_beh_data_ACC$Condition=="SemViol",]$ACC)
mean(BAN_beh_data_ACC[BAN_beh_data_ACC$Condition=="CatViol",]$ACC)
mean(BAN_beh_data_ACC[BAN_beh_data_ACC$Condition=="Gramm",]$ACC)
BAN_ACC_Main <- glmer(ACC ~ Condition * Prefix + (1|Participant) + (1|Item), data = BAN_beh_data_ACC, family = "binomial")
BAN_ACC_RED <- glmer(ACC ~ Condition + Prefix + (1|Participant) + (1|Item), data = BAN_beh_data_ACC, family = "binomial")
BAN_ACC_RED1 <- glmer(ACC ~ Prefix + (1|Participant) + (1|Item), data = BAN_beh_data_ACC, family = "binomial")
BAN_ACC_RED2 <- glmer(ACC ~ Condition + (1|Participant) + (1|Item), data = BAN_beh_data_ACC, family = "binomial")
anova(BAN_ACC_Main, BAN_ACC_RED)
BAN_ACC_RED <- glmer(ACC ~ Condition + Prefix + (1|Participant) + (1|Item), data = BAN_beh_data_ACC, family = "binomial")
BAN_ACC_RED1 <- glmer(ACC ~ Prefix + (1|Participant) + (1|Item), data = BAN_beh_data_ACC, family = "binomial")
BAN_ACC_RED2 <- glmer(ACC ~ Condition + (1|Participant) + (1|Item), data = BAN_beh_data_ACC, family = "binomial")
anova(BAN_ACC_Main, BAN_ACC_RED)
BAN_ACC_RED <- glmer(ACC ~ Condition + Prefix + (1|Participant) + (1|Item), data = BAN_beh_data_ACC, family = "binomial")
BAN_ACC_RED1 <- glmer(ACC ~ Prefix + (1|Participant) + (1|Item), data = BAN_beh_data_ACC, family = "binomial")
BAN_ACC_RED2 <- glmer(ACC ~ Condition + (1|Participant) + (1|Item), data = BAN_beh_data_ACC, family = "binomial")
anova(BAN_ACC_Main, BAN_ACC_RED)
install.packages("tinytex")
tinytex::install_tinytex()
install.packages("lme4")
install.packages("tidyverse")
install.packages("rmarkdown")
install(posterdown)
install.packages(posterdown)
install.packages('posterdown')
RT_model_11d <- lmer(RT~Condition*Prefix+ (1+Condition + Prefix|Participant) + (1+Condition + Prefix|Item), data = BanFullModel_RT_Res, REML = F)
library(lme4)
library(glmm)
library(tidyverse)
library(ggplot2)
library(trimr)
require(car)
require(lattice)
require(itsadug)
library(ggpubr)
library(effects)
library(sjPlot)
library(effectsize)
library(trimr)
library(palmerpenguins)
library(taylor)
library(plotrix)
library(multcomp)
library(emmeans)
RT_model_11d <- lmer(RT~Condition*Prefix+ (1+Condition + Prefix|Participant) + (1+Condition + Prefix|Item), data = BanFullModel_RT_Res, REML = F)
RT_model_11e <- lmer(RT~Condition*Prefix+ (1+Condition + Prefix||Participant) + (1+Condition + Prefix||Item), data = BanFullModel_RT_Res, REML = F)
#summary(RT_model_11a)
#summary(RT_model_11b)
summary(RT_model_11e)
n_distinct(BanFullModel_RT_Res$Participant)
library(lme4)
library(glmm)
library(tidyverse)
library(ggplot2)
library(trimr)
require(car)
require(lattice)
require(itsadug)
library(ggpubr)
library(effects)
library(sjPlot)
library(effectsize)
library(trimr)
library(palmerpenguins)
library(taylor)
library(plotrix)
library(multcomp)
library(emmeans)
# Load Cleaned Data
BAN_Online <- read.csv(file = "data/BAN_Online_ALL.csv", header = T)
BAN_Meg <- read.csv(file = "data/BAN_MEG_ALL.csv", header = T)
# Adding a Source Column
BAN_Online$Source<-"Online"
BAN_Meg$Source<-"MEG"
# Combine MEG and Online Behavioral Datasets
# RT for Correct Trials only
BAN_beh_data_RT  <- rbind (BAN_Online %>% filter(ACC == 1), BAN_Meg %>% filter(ACC == 1))
# ACC for all trials
BAN_beh_data_ACC <- rbind(BAN_Online,BAN_Meg)
n_distinct(BAN_beh_data_RT$Participant)
BAN_Data_ACC_ByItem<-BAN_beh_data_ACC%>%group_by(Item.no, Condition)%>%summarise(ACC=mean(ACC)*100)
#view(BAN_Data_ACC_ByItem)
str(BAN_beh_data_RT)
BAN_beh_data_RT <- BAN_beh_data_RT %>%
mutate(
Participant = as.factor(Participant),
Source = as.factor(Source),
Prefix = as.factor(Prefix),
Condition = as.factor(Condition),
Item = as.factor(Item.no)
)
str(BAN_beh_data_RT)
qqmath(~RT | Participant, data = BAN_beh_data_RT)
f = function(dfr)
return(shapiro.test(dfr$RT)$p.value)
p = as.vector(by(BAN_beh_data_RT, BAN_beh_data_RT$Participant, f))
names(p) = levels(BAN_beh_data_RT$Participant)
names(p[p < 0.05])
mean(BAN_beh_data_RT[BAN_beh_data_RT$Condition=="SemViol",]$RT)
mean(BAN_beh_data_RT[BAN_beh_data_RT$Condition=="CatViol",]$RT)
mean(BAN_beh_data_RT[BAN_beh_data_RT$Condition=="Gramm",]$RT)
BanFullModel_RT <- lmer(RT ~ (1|Participant) + (1|Item), data = BAN_beh_data_RT, REML = F)
cor(fitted(BanFullModel_RT), BAN_beh_data_RT$RT)^2
BanFullModel_RT_Res = BAN_beh_data_RT[abs(scale(resid(BanFullModel_RT))) < 2.5,]
BanFullModel_RT_2 <- lmer(RT ~ (1|Participant) + (1|Item), data = BanFullModel_RT_Res, REML = F)
cor(fitted(BanFullModel_RT_2), BanFullModel_RT_Res$RT)^2
qqmath(~RT | Participant, data = BanFullModel_RT_Res)
f = function(dfr)
return(shapiro.test(dfr$RT)$p.value)
p = as.vector(by(BanFullModel_RT_Res, BanFullModel_RT_Res$Participant, f))
names(p) = levels(BanFullModel_RT_Res$Participant)
names(p[p < 0.05])
mean(BanFullModel_RT_Res[BanFullModel_RT_Res$Condition=="SemViol",]$RT)
mean(BanFullModel_RT_Res[BanFullModel_RT_Res$Condition=="CatViol",]$RT)
mean(BanFullModel_RT_Res[BanFullModel_RT_Res$Condition=="Gramm",]$RT)
BanFullModel_RT_Res$Condition <-relevel(BanFullModel_RT_Res$Condition, ref="Gramm")
n_distinct(BanFullModel_RT_Res$Participant)
RT_model_11e <- lmer(RT~Condition*Prefix+ (1+Condition + Prefix||Participant) + (1+Condition + Prefix||Item), data = BanFullModel_RT_Res, REML = F)
setwd("/media/swarmoi/QM-Drive/Dropbox/SM-Projects/MPhil/github/Mphil-mouseTracking/Analysis/dummy")
df1=read.csv(file.choose(), header = T)
View(df1)
library(dplyr)
df1=read.csv(file.choose(), header = T)
df2<-df1%>%filter(Condition=mismathch_Source)
View(df1)
df2<-df1%>%filter(Condition='mismathch_Source'|Condition='mismathch_PC')
df2<- df1 %>% filter(Condition='mismathch_Source'|Condition='mismathch_PC')
df2<- subset(df1,Condition='mismathch_Source'|Condition='mismathch_PC')
?subset
df2<- subset(df1,Condition=='mismathch_Source'|Condition=='mismathch_PC')
View(df2)
df2<- subset(df1,Condition=='mismathch_Source' & Condition=='mismathch_PC')
df2<- subset(df1,Condition=='mismathch_Source' | Condition=='mismathch_PC')
View(df2)
df2<- subset(df1,Condition=='mismathch_Source' or Condition=='mismathch_PC')
df2<- subset(df1,Condition !='match')
View(df2)
View(df2)
m1<-lmer(RT~choice*Condition+(1|Subject)+(1|Item),data=df2)
library(lme4)
m1<-lmer(RT~choice*Condition+(1|Subject)+(1|Item),data=df2)
m1
df2$Condition
df2$choice
df2$choice<-as.factor(df2$choice)
df2$Condition<-as.factor(df2$Condition)
m1<-lmer(RT~choice*Condition+(1|Subject)+(1|Item),data=df2)
m1
m1<-lmer(AUC~choice*Condition+(1|Subject)+(1|Item),data=df2)
X <- model.matrix (m1, df2)
X
View(df2)
df3<- subset(df1,Condition =='match')
View(df3)
m2<-lmer(AUC~choice+(1|Subject)+(1|Item),data=df2)
m2
df3$choice<-as.factor(df3$choice)
df3$choice
df1=read.csv(file.choose(), header = T)
df2<- subset(df1,Condition !='match')
df3<- subset(df1,Condition =='match')
df3$choice<-as.factor(df3$choice)
df2$choice<-as.factor(df2$choice)
df2$Condition<-as.factor(df2$Condition)
m1<-lmer(AUC~choice*Condition+(1|Subject)+(1|Item),data=df2)
m1
m2<-lmer(AUC~choice+(1|Subject)+(1|Item),data=df3)
m2
View(df3)
View(df2)
View(df1)
