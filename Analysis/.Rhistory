return(read.csv(filepath, comment.char="#", header=FALSE, col.names=seq(1:n.cols)))
}
}
# Read in results file () The results file should be the downloaded PCIbex logfiles
results <- read.pcibex("raw/results.csv")
write.csv(results,"data/Data.csv")
View(results)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyverse)
rawfile <- read.csv("data/Data.csv")
#results2 <- filter(file, PennElementType == "MouseTracker")
results <- filter(rawfile, Parameter == "Move")
View(results)
timestamps_get_response <- vector()
xpos_get_response <- vector()
ypos_get_response <- vector()
for(row in 1:nrow(results)){
time <- 0
stream <- as.character(results[row,"Value"])
pos <- data.frame(time=c(time),x=as.numeric(gsub("^x(\\d+)y.+$","\\1", stream)), y=as.numeric(gsub("^.+y(\\d+)w.+$","\\1", stream)))
ptime <- time
counter <- 1
px <- pos[1,'x']
py <- pos[1,'y']
for(s in (strsplit(stream,'t')[[1]][-1])){
row <- strsplit(gsub("^(\\d+)([+-]\\d+)([+-]\\d+)$","\\1 \\2 \\3",s),' ')
ntime <- as.numeric(ptime+as.numeric(row[[1]][1]))
nx <- as.numeric(px+as.numeric(row[[1]][2]))
ny <- as.numeric(py+as.numeric(row[[1]][3]))
pos <- rbind(pos, data.frame(time=ntime,x=nx,y=ny))
ptime <- ntime
px <- nx
py <- ny
counter <- counter +1
}
times <- toString(pos[["time"]])
timestamp <- paste("[", times, "]", sep = "")
timestamps_get_response <- c(timestamps_get_response, timestamp)
xpos <- toString(pos[["x"]])
xpos_str <- paste("[", xpos, "]", sep = "")
xpos_get_response <- c(xpos_get_response, xpos_str)
ypos <- toString(pos[["y"]])
ypos_str <- paste("[", ypos, "]", sep = "")
ypos_get_response <- c(ypos_get_response, ypos_str)
}
results$timestamps <- timestamps_get_response
results$xpos <- xpos_get_response
results$ypos <- ypos_get_response
# inner_join based on X
library(dplyr)
results$xpos <- str_sub(results$xpos, 2, -2)
results$ypos <- str_sub(results$xpos, 2, -2)
results$Timestamps <- str_sub(results$timestamps, 2, -2)
results$xpos <-str_replace_all(results$xpos, " ", "")
results$ypos <-str_replace_all(results$xpos, " ", "")
results$Timestamps <-str_replace_all(results$Timestamps, " ", "")
results <- results %>% select(X,xpos,ypos,Timestamps)
output <- merge (x = rawfile, y = results, by = "X", all.x = TRUE)
#write.csv(output,"data/MPhil-MT-Data.csv")
#write.csv2(output, "data/MPhil-MT_Data2.csv")
write.csv(results,"data/MPhil-MT-Data.csv")
write.csv2(results, "data/MPhil-MT_Data2.csv")
knitr::opts_chunk$set(echo = TRUE)
# Clear environment
rm(list = ls())
# Load package
library("mousetrap")
#d=read.csv(file.choose(),sep=";", header = T)
d=read.csv(file.choose(),sep=";", header = T)
#d=read.csv(file.choose(),sep=";", header = T)
d=read.csv(file.choose(),sep=";", header = T)
e=read.csv(file.choose(), header = T)
View(d)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyverse)
library(tidyverse)
rawfile <- read.csv("data/Data.csv")
#results2 <- filter(file, PennElementType == "MouseTracker")
results <- filter(rawfile, Parameter == "Move")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyverse)
rawfile <- read.csv("data/Data.csv")
#results2 <- filter(file, PennElementType == "MouseTracker")
results <- filter(rawfile, Parameter == "Move")
timestamps_get_response <- vector()
xpos_get_response <- vector()
ypos_get_response <- vector()
for(row in 1:nrow(results)){
time <- 0
stream <- as.character(results[row,"Value"])
pos <- data.frame(time=c(time),x=as.numeric(gsub("^x(\\d+)y.+$","\\1", stream)), y=as.numeric(gsub("^.+y(\\d+)w.+$","\\1", stream)))
ptime <- time
counter <- 1
px <- pos[1,'x']
py <- pos[1,'y']
for(s in (strsplit(stream,'t')[[1]][-1])){
row <- strsplit(gsub("^(\\d+)([+-]\\d+)([+-]\\d+)$","\\1 \\2 \\3",s),' ')
ntime <- as.numeric(ptime+as.numeric(row[[1]][1]))
nx <- as.numeric(px+as.numeric(row[[1]][2]))
ny <- as.numeric(py+as.numeric(row[[1]][3]))
pos <- rbind(pos, data.frame(time=ntime,x=nx,y=ny))
ptime <- ntime
px <- nx
py <- ny
counter <- counter +1
}
times <- toString(pos[["time"]])
timestamp <- paste("[", times, "]", sep = "")
timestamps_get_response <- c(timestamps_get_response, timestamp)
xpos <- toString(pos[["x"]])
xpos_str <- paste("[", xpos, "]", sep = "")
xpos_get_response <- c(xpos_get_response, xpos_str)
ypos <- toString(pos[["y"]])
ypos_str <- paste("[", ypos, "]", sep = "")
ypos_get_response <- c(ypos_get_response, ypos_str)
}
results$timestamps <- timestamps_get_response
results$xpos <- xpos_get_response
results$ypos <- ypos_get_response
View(results)
#write.csv(output,"data/MPhil-MT-Data.csv")
#write.csv2(output, "data/MPhil-MT_Data2.csv")
write.csv(results,"data/MPhil-MT-Data.csv")
write.csv2(results, "data/MPhil-MT_Data2.csv")
#d=read.csv(file.choose(),sep=";", header = T)
d=read.csv(file.choose(),sep=";", header = T)
e=read.csv(file.choose(), header = T)
knitr::opts_chunk$set(echo = TRUE)
# Clear environment
rm(list = ls())
# Load package
library("mousetrap")
#d=read.csv(file.choose(),sep=";", header = T)
d=read.csv(file.choose(),sep=";", header = T)
e=read.csv(file.choose(), header = T)
View(d)
View(d)
mtdata = mt_import_mousetrap(
d,
xpos_label = "xpos",
ypos_label = "ypos",
timestamps_label = "timestamps",
mt_id_label = "Trial",
)
library(dplyr)
d <- d %>% rename(Trial = Trial)
View(d)
library(dplyr)
d <- d %>% rename(Trial = "Trial")
library(dplyr)
d <- d %>% rename(Trial = "Condition")
d <- filter(d, Parameter == "Move")
mtdata = mt_import_mousetrap(
d,
xpos_label = "xpos",
ypos_label = "ypos",
timestamps_label = "timestamps",
mt_id_label = "Trial",
)
View(d)
mtdata = mt_import_mousetrap(
d,
xpos_label = "xpos",
ypos_label = "ypos",
timestamps_label = "timestamps",
mt_id_label = "Trial",
)
#d=read.csv(file.choose(),sep=";", header = T)
d=read.csv(file.choose(),sep=";", header = T)
e=read.csv(file.choose(), header = T)
library(dplyr)
d <- d %>% rename(Trial = "Iten")
library(dplyr)
d <- d %>% rename(Trial = "Item")
d <- filter(d, Parameter == "Move")
mtdata = mt_import_mousetrap(
d,
xpos_label = "xpos",
ypos_label = "ypos",
timestamps_label = "timestamps",
mt_id_label = "Trial",
)
View(d)
mtdata = mt_import_mousetrap(
d,
xpos_label = "xpos",
ypos_label = "ypos",
timestamps_label = "timestamps",
mt_id_label = "X",
)
View(mtdata)
mt_plot(mtdata)
mt_plot(mtdata, use = "trajectories", use2 = "data", color="Trial")
mt_plot(mtdata, use = "trajectories", use2 = "data", color="Trial")
# Clear environment
rm(list = ls())
# Load package
library("mousetrap")
#d=read.csv(file.choose(),sep=";", header = T)
d=read.csv(file.choose(),sep=";", header = T)
e=read.csv(file.choose(), header = T)
library(dplyr)
d <- d %>% rename(Trial = "Condition")
d <- filter(d, Parameter == "Move")
mtdata = mt_import_mousetrap(
d,
xpos_label = "xpos",
ypos_label = "ypos",
timestamps_label = "timestamps",
mt_id_label = "X",
)
View(mtdata)
mt_plot(mtdata)
mt_plot(mtdata, use = "trajectories", use2 = "data", color="Trial")
mtdata <- mt_align_start(
mtdata,
use = "trajectories",
save_as = "trajectories",
dimensions = c("xpos", "ypos"),
start = c(0,0),
verbose = FALSE
)
# Plot the trajectories (start position aligned)
mt_plot(mtdata)
# Plot with colors (can be ignored)
mt_plot(mtdata, use = "trajectories", use2 = "data", color="Trial")
mtdata = mt_align_start_end(
mtdata,
use="trajectories",
save_as = "sn_trajectories",
dimensions=c("xpos","ypos"),
start=c(0,0),
end=c(-1,1),
verbose=FALSE
)
mtdata = mt_align_start_end(
mtdata,
use="trajectories",
save_as = "sn_trajectories",
dimensions=c("xpos","ypos"),
start=c(0,0),
end=c(-1,1),
verbose=FALSE
)
mt_plot(mtdata$sn_trajectories)
mt_plot(mtdata, use = "sn_trajectories", use2 = "data", color = "Trial")
knitr::opts_chunk$set(echo = TRUE)
# Clear environment
rm(list = ls())
# Load package
library("mousetrap")
#d=read.csv(file.choose(),sep=";", header = T)
d=read.csv(file.choose(),sep=";", header = T)
e=read.csv(file.choose(), header = T)
library(dplyr)
d <- d %>% rename(Trial = "Condition")
d <- filter(d, Parameter == "Move")
mtdata = mt_import_mousetrap(
d,
xpos_label = "xpos",
ypos_label = "ypos",
timestamps_label = "timestamps",
mt_id_label = "X",
)
View(mtdata)
mt_plot(mtdata)
mt_plot(mtdata, use = "trajectories", use2 = "data", color="Trial")
mtdata <- mt_align_start(
mtdata,
use = "trajectories",
save_as = "trajectories",
dimensions = c("xpos", "ypos"),
start = c(0,0),
verbose = FALSE
)
# Plot the trajectories (start position aligned)
mt_plot(mtdata)
# Plot with colors (can be ignored)
mt_plot(mtdata, use = "trajectories", use2 = "data", color="Trial")
mtdata = mt_align_start_end(
mtdata,
use="trajectories",
save_as = "sn_trajectories",
dimensions=c("xpos","ypos"),
start=c(0,0),
end=c(-1,1),
verbose=FALSE
)
mt_plot(mtdata$sn_trajectories)
View(mtdata)
View(d)
mtdata = mt_align_start_end(
mtdata,
use="trajectories",
save_as = "sn_trajectories",
dimensions=c("xpos","ypos"),
start=c(0,0),
end=c(-1,1),
verbose=FALSE
)
mt_plot(mtdata$sn_trajectories)
mt_plot(mtdata, use = "sn_trajectories", use2 = "data", color = "Trial")
mtdata = mt_time_normalize(
mtdata,
use="sn_trajectories",
save_as = "tn_trajectories",
dimensions=c("xpos","ypos"),
timestamps="timestamps",
nsteps=101,
verbose=FALSE
)
mtdata = mt_remap_symmetric(
mtdata,
use = "tn_trajectories",
save_as = "tn_trajectories",
dimensions = c("xpos", "ypos"),
remap_xpos = "right",
remap_ypos = "up"
)
mt_plot(mtdata$tn_trajectories)
mt_plot(mtdata, use = "tn_trajectories", use2 = "data", color = "Trial")
mtdata <- mt_align_start(
mtdata,
use = "trajectories",
save_as = "trajectories",
dimensions = c("xpos", "ypos"),
start = c(0,0),
verbose = FALSE
)
# Plot the trajectories (start position aligned)
mt_plot(mtdata)
# Plot with colors (can be ignored)
mt_plot(mtdata, use = "trajectories", use2 = "data", color="Trial")
mt_plot(mtdata$sn_trajectories)
View(mtdata)
knitr::opts_chunk$set(echo = TRUE)
# Clear environment
rm(list = ls())
# Load package
library("mousetrap")
#d=read.csv(file.choose(),sep=";", header = T)
d=read.csv(file.choose(),sep=";", header = T)
e=read.csv(file.choose(), header = T)
library(dplyr)
d <- d %>% rename(Trial = "Condition")
d <- filter(d, Parameter == "Move")
mtdata = mt_import_mousetrap(
d,
xpos_label = "xpos",
ypos_label = "ypos",
timestamps_label = "timestamps",
mt_id_label = "X",
)
View(mtdata)
mt_plot(mtdata)
mt_plot(mtdata, use = "trajectories", use2 = "data", color="Trial")
mtdata <- mt_align_start(
mtdata,
use = "trajectories",
save_as = "trajectories",
dimensions = c("xpos", "ypos"),
start = c(0,0),
verbose = FALSE
)
# Plot the trajectories (start position aligned)
mt_plot(mtdata)
# Plot with colors (can be ignored)
mt_plot(mtdata, use = "trajectories", use2 = "data", color="Trial")
mt_plot(mtdata$sn_trajectories)
knitr::opts_chunk$set(echo = TRUE)
# Clear environment
rm(list = ls())
# Load package
library("mousetrap")
#d=read.csv(file.choose(),sep=";", header = T)
d=read.csv(file.choose(),sep=";", header = T)
e=read.csv(file.choose(), header = T)
View(d)
n_distinct(d$id.Ibex)
d<- d%>% filter(id.Ibex == "dave@hot.com")
n_distinct(d$id.Ibex)
library(dplyr)
d <- d %>% rename(Trial = "Condition")
d <- filter(d, Parameter == "Move")
mtdata = mt_import_mousetrap(
d,
xpos_label = "xpos",
ypos_label = "ypos",
timestamps_label = "timestamps",
mt_id_label = "X",
)
View(mtdata)
mt_plot(mtdata)
mt_plot(mtdata, use = "trajectories", use2 = "data", color="Trial")
mtdata <- mt_align_start(
mtdata,
use = "trajectories",
save_as = "trajectories",
dimensions = c("xpos", "ypos"),
start = c(0,0),
verbose = FALSE
)
# Plot the trajectories (start position aligned)
mt_plot(mtdata)
# Plot with colors (can be ignored)
mt_plot(mtdata, use = "trajectories", use2 = "data", color="Trial")
mtdata = mt_align_start_end(
mtdata,
use="trajectories",
save_as = "sn_trajectories",
dimensions=c("xpos","ypos"),
start=c(0,0),
end=c(-1,1),
verbose=FALSE
)
mt_plot(mtdata$sn_trajectories)
mt_plot(mtdata, use = "sn_trajectories", use2 = "data", color = "Trial")
mtdata = mt_time_normalize(
mtdata,
use="sn_trajectories",
save_as = "tn_trajectories",
dimensions=c("xpos","ypos"),
timestamps="timestamps",
nsteps=101,
verbose=FALSE
)
mtdata = mt_remap_symmetric(
mtdata,
use = "tn_trajectories",
save_as = "tn_trajectories",
dimensions = c("xpos", "ypos"),
remap_xpos = "right",
remap_ypos = "up"
)
mt_plot(mtdata$tn_trajectories)
mt_plot(mtdata, use = "tn_trajectories", use2 = "data", color = "Trial")
knitr::opts_chunk$set(echo = TRUE)
# Clear environment
rm(list = ls())
# Load package
library("mousetrap")
#d=read.csv(file.choose(),sep=";", header = T)
d=read.csv(file.choose(),sep=";", header = T)
e=read.csv(file.choose(), header = T)
d<- d%>% filter(id.Ibex != "dave@hot.com")
mtdata = mt_import_mousetrap(
d,
xpos_label = "xpos",
ypos_label = "ypos",
timestamps_label = "timestamps",
mt_id_label = "X",
)
View(mtdata)
mt_plot(mtdata)
mt_plot(mtdata, use = "trajectories", use2 = "data", color="Trial")
mt_plot(mtdata, use = "trajectories", use2 = "data", color="Trial")
mt_plot(mtdata)
mt_plot(mtdata, use = "trajectories", use2 = "data", color="Trial")
mtdata <- mt_align_start(
mtdata,
use = "trajectories",
save_as = "trajectories",
dimensions = c("xpos", "ypos"),
start = c(0,0),
verbose = FALSE
)
# Plot the trajectories (start position aligned)
mt_plot(mtdata)
# Plot with colors (can be ignored)
mt_plot(mtdata, use = "trajectories", use2 = "data", color="Trial")
View(d)
# Clear environment
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
# User-defined function to read in PCIbex Farm results files
read.pcibex <- function(filepath, auto.colnames=TRUE, fun.col=function(col,cols){cols[cols==col]<-paste(col,"Ibex",sep=".");return(cols)}) {
n.cols <- max(count.fields(filepath,sep=",",quote=NULL),na.rm=TRUE)
if (auto.colnames){
cols <- c()
con <- file(filepath, "r")
while ( TRUE ) {
line <- readLines(con, n = 1, warn=FALSE)
if ( length(line) == 0) {
break
}
m <- regmatches(line,regexec("^# (\\d+)\\. (.+)\\.$",line))[[1]]
if (length(m) == 3) {
index <- as.numeric(m[2])
value <- m[3]
if (is.function(fun.col)){
cols <- fun.col(value,cols)
}
cols[index] <- value
if (index == n.cols){
break
}
}
}
close(con)
return(read.csv(filepath, comment.char="#", header=FALSE, col.names=cols))
}
else{
return(read.csv(filepath, comment.char="#", header=FALSE, col.names=seq(1:n.cols)))
}
}
# Read in results file () The results file should be the downloaded PCIbex logfiles
results <- read.pcibex("raw/results.csv")
write.csv(results,"data/Data.csv")
View(results)
